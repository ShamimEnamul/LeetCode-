/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    bool isSymmetric(TreeNode* root) {
        //recursive solution
        //return isMirror(root, root);
        
        // iterative solution
        return isMirrorIterative(root);
    }
    
    //recursive
    bool isMirror(TreeNode* t1, TreeNode* t2)
    {
        if(t1 == NULL && t2 == NULL) return true;
        if(t1 == NULL || t2 == NULL) return false;
        if(t1->val != t2->val) return false;
        
        return (t1->val == t2->val) && 
            isMirror(t1->left, t2->right) &&
            isMirror(t1->right, t2->left);
    }
    
    // Iterative
    bool isMirrorIterative(TreeNode* root)
    {
        std::queue<TreeNode*> myQueue;
        myQueue.push(root);
        myQueue.push(root);
        
        while(!myQueue.empty()){
            TreeNode* t1 = myQueue.front();
            myQueue.pop();
            TreeNode* t2 = myQueue.front();
            myQueue.pop();
            
            if(t1 == NULL && t2 == NULL) continue;
            if(t1 == NULL || t2 == NULL) return false;
            if(t1 -> val != t2 -> val) return false;
            
            myQueue.push(t1 -> left);
            myQueue.push(t2 -> right);
            myQueue.push(t1 -> right);
            myQueue.push(t2 -> left);            
        }
        return true;
        
    }
    
};
